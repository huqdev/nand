class MazeMenu {
    static String statusS, admin, enabled, disabled, felder, confirm;
    static String controlHeader, cESC, cW, cA, cS, cD, cF, cQ, cE, cC, c0;
    field boolean adminMode;
    field Status status;
    constructor MazeMenu new() {
        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void setAdminMode(boolean mode) {
        let adminMode = mode;
        return;
    }

    method void setStatus(Status newStatus) {
        let status = newStatus;
        return;       
    }

    method void update() {
        // clear Menu area
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,127,255);

        // Ãœberschrift des Menu
        let statusS = "Status:";
        do Output.moveCursor(0,0);
        do Output.printString(statusS);
        do statusS.dispose();
        
        // Admin Modus
        let admin = "Admin: ";
        do Output.moveCursor(1,0);
        do Output.printString(admin);
        do admin.dispose();
        // admin state
        do Output.moveCursor(1,6);
        if(adminMode) {
            let enabled = "enabled";
            do Output.printString(enabled);
            do enabled.dispose();
        } else {
            let disabled = "disabled";
            do Output.printString(disabled);
            do disabled.dispose();
        }
        
        // felder bzw. Tiles stats
        do Output.moveCursor(2,0);
        let felder = "entdeckt/gesamt:";
        do Output.printString(felder);
        do Output.moveCursor(3,0);
        do Output.printInt(status.getFreeTiles());
        // 47 = '/'
        do Output.printChar(47);
        do Output.printInt(status.getTotalTiles());
        do felder.dispose();
        
        // Controls
        do Output.moveCursor(5,0);
        let controlHeader = "Steuerung:";
        do Output.printString(controlHeader);
        do controlHeader.dispose();
        
        // move with wasd
        do Output.moveCursor(6,0);
        let cW = "w/W: move up";
        do Output.printString(cW);
        do cW.dispose();
        do Output.moveCursor(7,0);
        let cA = "a/A: move left";
        do Output.printString(cA);
        do cA.dispose();
        do Output.moveCursor(8,0);
        let cS = "s/S: move down";
        do Output.printString(cS);
        do cS.dispose();
        do Output.moveCursor(9,0);
        let cD = "d/D: move right";
        do Output.printString(cD);
        do cD.dispose();
        
        // turn and sprint
        do Output.moveCursor(11,0);
        let cE = "e/E: turn right";
        do Output.printString(cE);
        do cE.dispose();
        do Output.moveCursor(12,0);
        let cQ = "q/Q: turn left";
        do Output.printString(cQ);
        do cQ.dispose();
        do Output.moveCursor(13,0);
        do cQ.dispose();
        let cF = "f/F: sprint";
        do Output.printString(cF);
        do cF.dispose();

        // adminMode
        do Output.moveCursor(15,0);
        let cESC = "ESC: Admin";
        do Output.printString(cESC);
        do cESC.dispose();

        // admin Only controls
        if(adminMode) {
            do Output.moveCursor(16,0);
            let cC = "c/C: clear";
            do Output.printString(cC);
            do cC.dispose();
            do Output.moveCursor(17,0);
            let c0 = "0-9: load";
            do Output.printString(c0);
            do c0.dispose();
        }
        return;
    }

    method void enablePopup(int id) {
        let confirm = "press y to confirm admin mode";
        do Screen.setColor(false);
        do Screen.drawRectangle(128, 64, 256 + 128, 128);
        do Screen.setColor(true);
        do Screen.drawRectangle(130, 66, 256 + 126, 126);
        do Screen.setColor(false);
        do Screen.drawRectangle(132, 68, 256 + 124, 124);
        do Output.moveCursor(7,17);
        do Output.printString(confirm);
        do confirm.dispose();
        return;
    }
}
